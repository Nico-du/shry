<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" initialize="initPage()" updateComplete="afterInitPage()"
		   showEffect="WipeRight" hideEffect="WipeLeft" width="100%" height="100%"  fontSize="12" verticalGap="2"
		   xmlns:cnsdg="cn.cnsasfram.datagrid.*" xmlns:cnspg="cn.cnspagemoduel.common.*">
	<mx:RemoteObject id="AllAssetServiceRmt" destination="allAssetService" endpoint="/mxAsset/messagebroker/amf" showBusyCursor="true"/>
	<mx:RemoteObject id="chartService" destination="chartService"  endpoint="/mxAsset/messagebroker/amf" showBusyCursor="true"/>
	<mx:Script source="../systemManage/initAllAssetRule.as"/> 
	<mx:Script>
		<![CDATA[
			import asset_bfdj.ProcessMethods;
			
			import cn.cnsasfram.entity.DoResult;
			import cn.cnsasfram.entity.enum.Errors;
			import cn.cnsasfram.helper.ASCommonHelper;
			import cn.cnsasfram.helper.ASJsonHelper;
			import cn.cnsasfram.helper.ASStringHelper;
			import cn.cnspagemoduel.chartline.LinueChartModel;
			
			import com.adobe.serialization.json.JSON;
			import com.benstucki.utilities.IconUtility;
			import com.commonpages.UploadWindow;
			
			import flex.util.CommonMethod;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectProxy;
			
			import shry_zlgl.FYFormMoudel;
			//页面标题icon路径
			[Bindable]
			protected var pagetitleIcon:String="";
			//页面默认标题名称
			[Bindable]
			protected var pagetitle:String="选型结果数据";
			//分页中备注信息
			[Bindable]
			protected var dg_pg_othermsg:String="";
			//分页中数据总数
			[Bindable]
			protected var dg_pg_datacount:int=0;
			//表格数据源
			[Bindable]
			public var dataArray:ArrayCollection=null;
			//所有按钮及工具栏高度
			[Bindable]
			protected var aboutheight:Number=22;
			//页面数据是否选中
			[Bindable]
			protected var dataIsSelected:Boolean=false;
			
			//指定linkbutton选中后的颜色,仅供选择
			public var tempPublicDefaultColor:uint=0xCCFFFF;
			//默认操作实体名称
			public var tempObjBeanName:String="SHRY_FY_DATA";
			//默认操作视图名称
			public var tempObjViewName:String="SHRY_FY_VIEW";
			//页面初始化是否加载权限
			public var pageIsLoadPoer:Boolean=true;
			//页面初始化是否加载数据
			public var pageIsLoadData:Boolean=true;
			//搜索表单初始化是否展开
			public var searchFormIsOpen:Boolean=false;
			//风叶ID
			public var bfdid:String="";
			//父窗口
			public var parentPage:FYXXFormMoudel = null;
			//选型 条件
			public var selectionObject:Object = null;
			
			//初始调用方法
			public function initPage():void{
				this.highSearchChange();
				if(true){
					beforeInitPage();
				}
			}
			
			//初始化页面之前调用
			public function beforeInitPage():void{
				
			}
			
			public var rmtResult:ResultEvent = null;
			//初始化页面之后调用
			public function afterInitPage():void{
			/* 	//加载权限
				 if(pageIsLoadPoer){
					loadUserPower();
				} 
				//加载数据
			 	if(pageIsLoadData){
					loadData();
				}  */
				
				dataSearchActionBack(rmtResult);
				cns_dg.selectedIndex = 0;
				reInitLineChart(null);
			}
			
			//分析权限
			public function loadUserPower():void{
				//判断读取权限
				
				//判断写入权限
				//	ASCommonHelper.controlVisible(this.otherAction,false);
				ASCommonHelper.controlVisible(this.otherAction,otherAction.visible);
				ASCommonHelper.controlVisible(this.exportAction,exportAction.visible);
				
			//	ProcessMethods.changeCNSTModuelState(this,newAction.visible,editAction.visible,removeAction.visible);
			}
			
			//加载数据
			public function loadData():void{
				dataSearchAction(this.cns_dg_pg.pagesize,1);
			}
			
			//点击搜索按钮事件
			public function searchClickAction():void{
				dataSearchAction(this.cns_dg_pg.pagesize,1);
			} 
			
			//表格单击事件
			protected function gridItemDataClick(tempEvent:ListEvent):void{
				var tempSelctedItem:Object=tempEvent.currentTarget.selectedItem;
				if(tempSelctedItem==null){
					return;
				}
				tempSelctedItem.selected=!tempSelctedItem.selected;				
				this.cns_dg.invalidateList();
				checkDataIsSelected();
			}
			
			//表格双击事件
			public function gridItemDataDoubleClick(tempEvent:ListEvent):void{
				var tempSelectedItem:Object=tempEvent.currentTarget.selectedItem;
				lookDataAction(tempSelectedItem);
			}
			
			//数据选中事件
			public function dataChooseActionClick(tempEvent:ListEvent):void{
				var tempObj:Object=tempEvent.currentTarget.selectedItem;
				if(tempObj==null || this.dataArray==null || this.dataArray.length<1){
					return;
				}
				var tempStr:String=tempObj.value;
				if(ASStringHelper.stringCompare(tempStr,"-1",true)==0){
					return;
				}else if(ASStringHelper.stringCompare(tempStr,"1",true)==0){
					for each(var dataobjAll:Object in this.dataArray){
						dataobjAll.selected=true;
					}
				}else if(ASStringHelper.stringCompare(tempStr,"0",true)==0){
					for each(var dataobjAbsout:Object in this.dataArray){
						dataobjAbsout.selected=!dataobjAbsout.selected;
					}
				}
				this.cns_dg.invalidateList();
				checkDataIsSelected();
			}
			
			//查看事件
			protected function selectActionClick():void{
				var tempSelectItem:Object=null;
				for each(var dataobj:Object in this.dataArray){
					if(dataobj.selected){
						tempSelectItem=dataobj;
						break;
					}
				}
				if(tempSelectItem==null){
					return;
				}
				lookDataAction(tempSelectItem);
			}
			
			//新建事件
			protected function newActionClick():void{
					lookDataAction(null);
			}
			
			//编辑事件
			protected function editActionClick():void{
				var tempSelectItem:Object=null;
				for each(var dataobj:Object in this.dataArray){
					if(dataobj.selected){
						tempSelectItem=dataobj;
						break;
					}
				}
				if(tempSelectItem==null){
					return;
				}
				lookDataAction(tempSelectItem);
			}
			
			//删除事件
			protected function removeActionClick():void{
				Alert.show("您确认要删除风叶数据吗？","系统提示",Alert.OK|Alert.CANCEL,Application.application.mainPage,removeDataAction);
			}
			
			//导出数据
			protected function exportActionClick():void{
				CommonMethod.exportWFExcelData(cns_dg,getDataSeacrchCondition(),"FYID",tempObjViewName,"风叶数据信息","风叶数据信息");
			}
			
			//下载模板事件
			protected function exportModelActionClick():void{
				
			}
			
			//上传数据事件
			protected function importDataActionClick():void{
				var upw:UploadWindow= new UploadWindow();
				upw.url="/mxAsset/servlet/UploadServlet";
				PopUpManager.addPopUp(upw,this.parentApplication as DisplayObject,true);
				PopUpManager.centerPopUp(upw);
				
				
			}
			
			//查看详细数据
			protected function lookDataAction(tempSelctedItem:Object=null):void{
				var tempWindow:FYFormMoudel=new FYFormMoudel();
				var tempid:String="";
				if(tempSelctedItem!=null){
					tempid=tempSelctedItem.fyid;
				}
				tempWindow.dataId=tempid;
		//		tempWindow.parentPage=this;
				this.cns_dg_pg.openEditPage(tempWindow);
			}
			//检测表格是否存在选中数据
			public function checkDataIsSelected():void{
				for each(var dataobj:Object in this.dataArray){
					if(dataobj.selected){
						this.dataIsSelected=true;
						return;
					}
				}
				this.dataIsSelected=false;
			}
			
			//加载相关信息
			protected function dataSearchAction(tempPageSize:int,tempPageCurrent:int):void{
				var strcondition:String=getDataSeacrchCondition();
				this.AllAssetServiceRmt.GetAllAsset(tempObjViewName,tempPageSize,tempPageCurrent,strcondition);
				this.AllAssetServiceRmt.addEventListener(ResultEvent.RESULT,dataSearchActionBack);
			}
			//加载相关信息回调方法
			protected function dataSearchActionBack(rmtResult:ResultEvent):void{
				this.AllAssetServiceRmt.removeEventListener(ResultEvent.RESULT,dataSearchActionBack);
				if(this.isDeleteDateComplete){this.removeAssetLSJL(); this.isDeleteDateComplete = false;}
				var objResult:Object=rmtResult.result;
				var strresult:String=objResult.toString();
				var jsonObj:Object=JSON.decode(strresult,true);
				var itemtotal:Object=jsonObj.itemtotal;
				var othermsg:Object=jsonObj.othermsg;
				var items:Object=jsonObj.items;
				if(items==null){
					return;
				}
				this.dg_pg_datacount=parseInt(itemtotal as String);
				this.dg_pg_othermsg=othermsg==null?"":othermsg.toString();
				this.dataArray=ASCommonHelper.addArraySelectedPro(new ArrayCollection(items as Array));
				this.checkDataIsSelected();
				this.cns_dg_pg.setPagingCount();
				
				this.loadUserPower();
			}
			//得到搜索条件
			protected function getDataSeacrchCondition():String{
				var condition:Object=new Object();
				/* if(!searchFormIsOpen){
					var xh:String=this.xh.text;
					var ypsm:String=this.ypsm.text;
					var zj:String=this.zj.text;
					var fbzj:String=this.fbzj.text;
					var dlhzj:String=this.dlhzj.text;
					var zl:String=this.zl.text;
					var qj:String=this.qj.text;
					if(!ASStringHelper.isNullOrEmpty(xh)){
						condition.s_xh_string_like=xh;
					}
					if(!ASStringHelper.isNullOrEmpty(ypsm)){
						condition.s_ypsm_string_like=ypsm;
					}
					if(!ASStringHelper.isNullOrEmpty(zj)){
						condition.s_zj_string_like=zj;
					}
					if(!ASStringHelper.isNullOrEmpty(fbzj)){
						condition.s_fbzj_string_like=fbzj;
					}
					if(!ASStringHelper.isNullOrEmpty(dlhzj)){
						condition.s_dlhzj_string_like=dlhzj;
					}
					if(!ASStringHelper.isNullOrEmpty(zl)){
						condition.s_zl_string_like=zl;
					}
					if(!ASStringHelper.isNullOrEmpty(qj)){
						condition.s_qj_string_like=qj;
					}
				}else{
					var quklytext:String=this.qukilySearchTxt.text;
					if(!ASStringHelper.isNullOrEmpty(quklytext)){
						condition.s_xh_string_like=quklytext;
					}
				} */
		//		condition.s_bfdid_string_eq=bfdid;
				var conditionJson:String=JSON.encode(condition);
				return conditionJson;
			}
			
			//删除数据
			protected function removeDataAction(doEvent:CloseEvent):void{
				if(doEvent.detail==Alert.CANCEL){
					return;
				}
				var dataids:String=this.getRemoveDataArray();
				if(ASStringHelper.isNullOrEmpty(dataids)){
					return;
				}
				AllAssetServiceRmt.RemoveObject(dataids,"SHRY_FY_DATA","FYID","风叶"); 
				AllAssetServiceRmt.addEventListener(ResultEvent.RESULT,removeDataActionBack);
				this.deleteDataIds = dataids;
			}
			//删除数据回调方法
			protected function removeDataActionBack(rmtResult:ResultEvent):void{
				AllAssetServiceRmt.removeEventListener(ResultEvent.RESULT,removeDataActionBack);
				var doResult:DoResult=ASJsonHelper.stringJsonConverToDoResult(rmtResult.result.toString());
				if(doResult!=null && doResult.nRetCode!=Errors.OK){
					Alert.show(doResult.strErrorInfo);
					return;
				}else{
					//	Alert.show("数据删除成功");
					this.isDeleteDateComplete = true;
					this.loadData();
				}
			}
			private var isDeleteDateComplete:Boolean = false;
			private var deleteDataIds:String = "";
			public function removeAssetLSJL():void{
				if(!CommonMethod.isNullOrWhitespace(deleteDataIds)){
					AllAssetServiceRmt.RemoveObject(deleteDataIds,"CNST_ASSETBGJL_DATA","SQDID","报废登记");
					this.deleteDataIds = "";
				}
			}
			//得到要删除的数据
			protected function getRemoveDataArray():String{
				var dataids:String="";
				for each(var dataobj:Object in this.dataArray){
					if(dataobj.selected){
						dataids+=dataobj.fyid+",";
					}
				}
				if(!ASStringHelper.isNullOrEmpty(dataids)){
					dataids=dataids.substr(0,dataids.length-1);
				}
				return dataids;
			}
			//格式化datagrid的日期
			public static function dateItemFormat(item:Object,dgColumn:DataGridColumn):String{  
				var dataFormat:DateFormatter = new DateFormatter();  
				dataFormat.formatString = "YYYY-MM-DD";  
				var value:Object = item[dgColumn.dataField];  
				return dataFormat.format(value);  
			}
			
			//选择高级搜索切换
			protected function highSearchChange():void{
				/* if(searchFormIsOpen){
					this.qukilySearchBar.enabled=false;
					ASCommonHelper.controlVisible(this.highSearchBox,true);
					this.highSearch.label="隐藏";
				}else{
					this.qukilySearchBar.enabled=true;
					ASCommonHelper.controlVisible(this.highSearchBox,false);
					this.highSearch.label="高级";
				} */
				searchFormIsOpen=!searchFormIsOpen;
			}
			
			//搜索重置
			protected function dataSearchResetAction():void{
				/* this.xh.text = "";
				this.ypsm.text = "";
				this.zj.text = "";
				this.fbzj.text = "";
				this.dlhzj.text = "";
				this.zl.text = "";
				this.qj.text = ""; */
			}
			
			
			//得到表格行号
			protected function getColumnIndex(item:Object,column:DataGridColumn):String{
				return String(this.cns_dg.dataProvider.getItemIndex(item)+1);
			}
			

			protected function button1_clickHandler(event:MouseEvent):void
			{
				parentPage.pageTitle= "风叶选型 》输入选型参数";
				parentPage.pagePanel.removeAllChildren();
				parentPage.pagePanel.addChild(CommonMethod.pageCacheObj.FYXX_selectionStartBox as DisplayObject);
			}
			
			public var tgX:String = "-1";
			public var tgY:String = "-1";
			[Bindable]
			public var xxtextData:String = "";
			public function reInitLineChart(event:Event){
				
				var tempSelectItem:Object=this.cns_dg.selectedItem;
				/* for each(var dataobj:Object in this.dataArray){
					if(dataobj.selected){
						tempSelectItem=dataobj;
						break;
					}
				} */
				if(tempSelectItem==null){
					return;
				}
				
				var sFyid:String = tempSelectItem.fyid;
				var sSql:String = "select * from SHRY_FYXN_DATA where fyid = '"+sFyid+"' order by (ll+0) asc";
				
				chartService.getXXJGChartList(sSql,JSON.encode(tempSelectItem));
				chartService.addEventListener(ResultEvent.RESULT,resultBack);
			}
			private function resultBack(event:ResultEvent):void {
				chartService.removeEventListener(ResultEvent.RESULT,resultBack);
				if(event.result == null)return;
				/* var tempSelectItem:Object=this.cns_dg.selectedItem;
				chartService.translateData(JSON.encode(event.result.list.source),JSON.encode(tempSelectItem),"JL");
				chartService.addEventListener(ResultEvent.RESULT,resultBack1);
			}
			private function resultBack1(event:ResultEvent):void {
				chartService.removeEventListener(ResultEvent.RESULT,resultBack1);
				if(event.result == null)return;
				//添加多曲线
				var objList:ArrayCollection = new ArrayCollection(event.result as Array); */
				var objList:ArrayCollection = event.result as ArrayCollection;
				
				var lineChart4:LinueChartModel = new LinueChartModel();
				lineChart4.modelTitle="风叶流量—静压曲线图"; lineChart4.height=this.height - 140;
				lineChart4.xToolTipTiltle = lineChart4.xAxisTitle= "流量";lineChart4.yToolTipTiltle= lineChart4.yAxisTitle= "静压";
				lineChart4._xField = "ll"; lineChart4._yField = "jyl";
				lineChart4.dpArray = objList;
				lineChart4.percentHeight = 100;
				lineChart4.tgX = this.tgX;
				lineChart4.tgY = this.tgY;
				lineChartBox.removeAllChildren();
				lineChartBox.addChild(lineChart4);
			}
		]]>
	</mx:Script>
	<mx:HBox id="XXDataBox" width="100%" height="{aboutheight*2}" verticalGap="0"  horizontalAlign="center" paddingTop="0" verticalAlign="middle" horizontalScrollPolicy="off" verticalScrollPolicy="off" >
		<mx:Label text="选型参数：" fontWeight="bold"/>
		<mx:TextArea id="xxDataTextArea" editable="false" borderStyle="solid" borderColor="#99CCFF" width="100%" height="{aboutheight}"  text="{xxtextData}"/>
		<mx:Button  click="button1_clickHandler(event)" label="返回"
				   icon="@Embed(source='images/icon_return.png')"/>
	</mx:HBox>
			<mx:VDividedBox width="100%" height="100%" verticalAlign="middle"  horizontalAlign="center" horizontalGap="0">
				<!--性能数据-->
				<mx:VBox id="lineChartBox" width="100%" height="70%" verticalGap="2" borderStyle="none">
					<!--<shryChart:LinueChartModel modelTitle="总成流量—静压曲线图" height="{this.height - 140}" id="lineChart05" />-->
					<!--<mx:HBox width="100%" height="20" borderStyle="none" backgroundColor="#99CCFF" horizontalAlign="left" horizontalGap="0" verticalAlign="middle" verticalGap="0">
						<mx:Label text="性能数据" textIndent="10" width="100%" height="20" fontWeight="normal" fontSize="13"/>
					</mx:HBox>
					<mx:DataGrid id="cns_dg01" dataProvider="{dataArray}" itemClick="gridItemDataClick(event)" 
								 itemDoubleClick="gridItemDataDoubleClick(event)" doubleClickEnabled="true" width="100%" height="100%">
						<mx:columns>
							<mx:DataGridColumn headerText="联系单号" width="120" dataField="lxdh" sortable="true"/>
							<mx:DataGridColumn headerText="风叶型号" width="120" dataField="fyxh" sortable="true"/>
							<mx:DataGridColumn headerText="流量(m^3/h)" width="120" dataField="ll" sortable="true"/>
							<mx:DataGridColumn headerText="静压(Pa)" width="80" dataField="jyl" sortable="true"/>
							<mx:DataGridColumn headerText="主风扇转速(rpm)" width="130" dataField="zzs" sortable="true"/>
							<mx:DataGridColumn headerText="辅风扇转速(rpm)" width="130" dataField="fzs" sortable="true"/>
							<mx:DataGridColumn headerText="噪声(dB)" width="80" dataField="fszs" sortable="true"/>
							<mx:DataGridColumn headerText="扭矩(N.M)" width="80" dataField="nj" sortable="true"/>				
							<mx:DataGridColumn headerText="轴功率(W)" width="100" dataField="zgl" sortable="true"/>				
							<mx:DataGridColumn headerText="效率(%)" width="80" dataField="xl" sortable="true"/>
							<mx:DataGridColumn headerText="更新人" width="100" dataField="updateusername" sortable="true"/>
							<mx:DataGridColumn headerText="更新时间" width="155" dataField="updatedate" sortable="true"/>
							<mx:DataGridColumn headerText="" dataField="" sortable="false"/>
						</mx:columns>
					</mx:DataGrid>-->
				</mx:VBox>
				
				<!--匹配到的风叶列表数据  #B14C6B-->
			<mx:VBox width="100%" height="30%" verticalGap="2" borderStyle="solid" borderColor="#B14C6B">
				<mx:HBox width="100%" height="20" borderStyle="none" backgroundColor="#B14C6B" 
						 horizontalAlign="left" horizontalGap="0" verticalAlign="middle" verticalGap="0">
					<mx:Label text="选型结果" textIndent="10" width="200" height="20" fontWeight="bold" fontSize="13" />
					<!--<mx:RadioButtonGroup id="showType" />
					<mx:RadioButton label="性能数据显示" groupName="showType" />
					<mx:RadioButton label="曲线图显示" groupName="showType" />-->
				</mx:HBox>
			<!--工具栏-->
			<mx:HBox id="toolBar" width="100%" visible="false" includeInLayout="false" height="{aboutheight}" horizontalGap="0" horizontalAlign="left" paddingLeft="0" verticalAlign="middle" borderStyle="none" backgroundColor="#99CCFF">
				<mx:ComboBox id="dataChooseAction" labelField="label" change="dataChooseActionClick(event)" editable="false" width="67" height="{aboutheight}" blendMode="overlay">
					<mx:Array id="cbChooseArray">
						<mx:Object label="选择" value="-1"/>
						<mx:Object label="全选" value="1"/>
						<mx:Object label="反选" value="0"/>
					</mx:Array>
				</mx:ComboBox>
				<mx:LinkButton id="selectAction" click="selectActionClick()" enabled="{dataIsSelected}" height="{aboutheight}" label="查看" toolTip="查看" icon="@Embed(source='images/icon_choosedate.gif')"/>
				<mx:LinkButton id="exportAction" click="exportActionClick()" enabled="{dataIsSelected}" height="{aboutheight}" label="导出" toolTip="导出" icon="@Embed(source='images/export.gif')"/>
				<mx:LinkButton id="importDataAction" label="导入" icon="@Embed(source='images/import.gif')" click="importDataActionClick()"  visible="false" includeInLayout="false"/>
				<mx:LinkButton id="refreshAction" click="searchClickAction()" height="{aboutheight}" label="刷新" toolTip="刷新" icon="@Embed(source='images/icon_refresh.png')"/>
				<mx:ComboBox id="otherAction" cornerRadius="2" editable="false" width="90" height="{aboutheight}" blendMode="overlay">
					<mx:Array id="cbotherchoose">
						<mx:Object label="其它操作" value="unknow"/>
						<mx:Object label="导出模板" value="exportModelAction"/>
						<mx:Object label="导入数据" value="inportDataAction"/>
					</mx:Array>
				</mx:ComboBox>
			</mx:HBox>
			<!--表格数据-->
			<mx:VBox width="100%" height="100%" verticalGap="2" borderStyle="none">
				<!--itemClick="gridItemDataClick(event)" -->
				<mx:DataGrid id="cns_dg" dataProvider="{dataArray}" rowHeight="{aboutheight}"
							 itemClick="reInitLineChart(event)" doubleClickEnabled="false" width="100%" height="100%">
					<mx:columns>
						<mx:DataGridColumn headerText="" minWidth="43" width="43" draggable="false" sortable="false" labelFunction="getColumnIndex" textAlign="center">
							<mx:itemRenderer>
								<mx:Component>
									<mx:CheckBox selected="{data.selected}"/>
								</mx:Component>
							</mx:itemRenderer> 
						</mx:DataGridColumn>
						<mx:DataGridColumn headerText="型号" width="120" dataField="xh" sortable="true"/>
						<mx:DataGridColumn headerText="叶片数目" width="80" dataField="ypsm" sortable="true"/>
						<mx:DataGridColumn headerText="直径(毫米)" width="80" dataField="zj" sortable="true"/>
						<mx:DataGridColumn headerText="翻边直径(毫米)" width="110" dataField="fbzj" sortable="true"/>
						<mx:DataGridColumn headerText="导流环直径(毫米)" width="110" dataField="dlhzj" sortable="true"/>
						<mx:DataGridColumn headerText="轮毂直径(毫米)" width="110" dataField="lgzj" sortable="true"/>
						<mx:DataGridColumn headerText="重量(克)" width="80" dataField="zl" sortable="true"/>
						<mx:DataGridColumn headerText="叶片分布" width="80" dataField="ypfb" sortable="true"/>				
						<mx:DataGridColumn headerText="状态" width="80" dataField="syzt" sortable="true"/>	
						<mx:DataGridColumn headerText="选型所取转速" width="100" dataField="stdzs" sortable="true"/>			
						<mx:DataGridColumn headerText="功率" width="100" dataField="stdgl" sortable="true"/>
						<mx:DataGridColumn headerText="数据更新时间" width="155" dataField="updatedate" sortable="true"/>
						<mx:DataGridColumn headerText="" dataField="" sortable="false"/>
					</mx:columns>
				</mx:DataGrid>
				<cnspg:PagingMoudel id="cns_dg_pg"  visible="false" includeInLayout="false" width="100%" height="{aboutheight}" datacount="{dg_pg_datacount}" othermsg="{dg_pg_othermsg}" funReqData="dataSearchAction"/>
			      </mx:VBox>
				</mx:VBox>
	         </mx:VDividedBox>
</mx:Module>