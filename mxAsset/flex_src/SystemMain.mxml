<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ns1="*" initialize="initPage()" updateComplete="afterInitPage()"
		   width="100%" height="100%" paddingTop="5" paddingLeft="5" paddingBottom="5" paddingRight="5" 
		   fontSize="12" backgroundColor="white">
	<mx:Script>
		<![CDATA[
			import asset_codelist.CodeListGridMoudel;
			import asset_codelist.DictionaryGridMoudel;
			
			import cn.cnsasfram.helper.ASStringHelper;
			
			import com.benstucki.utilities.IconUtility;
			
			import flex.util.CommonMethod;
			
			import mx.containers.VBox;
			import mx.controls.Tree;
			import mx.core.INavigatorContent;
			import mx.events.EffectEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			//菜单数据
			public var menuTreeDate:XML=null;
			//保存实例化的对象
			private var modelMap:Dictionary=null;
			//用户管理
			private var USER:String="USER";
			//角色管理
			private var RULE:String="RULE";
			//组织管理
			private var ZZGL:String="ZZGL";
			//代码表管理
			private var CODELIST:String="CODELIST";
			//固定资产国标
			private var DICTIONARYLIST:String="DICTIONARYLIST";
			//流程管理
			private var LCGL:String="LCGL";
			//流程管理
			private var SJTB:String="SJTB";

			//初始化页面调用
			public function initPage():void{
				modelMap=new Dictionary();
				if(true){
					beforeInitPage();
				}
				addFoldBtn();
			}
			
			//初始化页面之前调用
			public function beforeInitPage():void{
				/* this.menuTreeDate=this.systemMainXml; */
				this.menutree.dataProvider=menuTreeDate;
				this.menutree.callLater(expandTree);
			}
			
			//初始化页面之后调用
			public function afterInitPage():void{
			//	treeSelectClick();
				initAddFoldBtn();
			}
			
			//展开树节点
			protected function expandTree():void{
				this.menutree.expandChildrenOf(this.menuTreeDate,true);
				this.menutree.selectedIndex=0;
				if(this.menutree.selectedItem == null)return;
				var selectItem:XML=this.menutree.selectedItem as XML;
				var selectChildList:XMLList=selectItem.children();
				if(selectChildList==null){
					return;
				}
				var tempItem:XML=selectChildList[0];
				this.menutree.selectedItem=tempItem;
			}
			
			//点击树节点事件
			public function treeSelectClick():void{
				if(!directoryTreeIsSelectItem()){
					return;
				}
				var selectItem:XML=this.menutree.selectedItem as XML;
				if(selectItem==null){
					return;
				}
				//如果点击父节点，返回
				if(selectItem.hasComplexContent()){
					return;
				}
				var tempContent:INavigatorContent=getModelBySelect(selectItem);
				if(tempContent==null){
					return;
				}
				this.managerStack.selectedChild=tempContent;
			}
			
			//判断树节点是否选择项
			public function directoryTreeIsSelectItem():Boolean{
				var treeSelectedIndex:int=this.menutree.selectedIndex;
				if(treeSelectedIndex!=-1){
					return true;
				}else{
					return false;
				}
			}
			
			//根据选中得到对象
			public function getModelBySelect(selectItem:XML):INavigatorContent{
				if(selectItem==null){
					return null;
				}
				var strid:String=selectItem.@id;
				var strname:String=selectItem.@label;
				var strpageurl:String=selectItem.@pageUrl;
				var targetModel:*=this.modelMap[strid];
				if(targetModel!=null){
					return targetModel;
				}
				var tempMoudel:*=null;
				/*if(ASStringHelper.stringCompare(this.USER,strpageurl,true)==0){
					tempMoudel=new User();
				}else if(ASStringHelper.stringCompare(this.RULE,strpageurl,true)==0){
					tempMoudel=new Rule();
				}else if(ASStringHelper.stringCompare(this.ZZGL,strpageurl,true)==0){
					tempMoudel=new DeptList();
				}else if(ASStringHelper.stringCompare(this.CODELIST,strpageurl,true)==0){
					tempMoudel=new CodeListGridMoudel();
				}else if(ASStringHelper.stringCompare(this.DICTIONARYLIST,strpageurl,true)==0){
					tempMoudel=new DictionaryGridMoudel();
				}else if(ASStringHelper.stringCompare(this.LCGL,strpageurl,true)==0){
					tempMoudel=new WFStepGridMoudel();
				}else if(ASStringHelper.stringCompare(this.SJTB,strpageurl,true)==0){
					tempMoudel=new SjtbList();
				}*/
			
			if(tempMoudel == null){return null;}
			
			if(CommonMethod.executePwdAuthority(tempMoudel,selectItem) == null)return null;	//执行权限验证	1
			this.modelMap[strid]=tempMoudel;
			this.managerStack.addChild(tempMoudel);
			
			return tempMoudel;
				
			}
			
			
			
			/**
			 *添加展开/收起树形菜单按钮 
			 **/
			private function addFoldBtn():void{
				PopUpManager.addPopUp(imgFold, this,false);
				imgFold.addEventListener(MouseEvent.CLICK,imgFoldClickHandler);
				menuLeft.addEventListener(ResizeEvent.RESIZE,resizeHandler);
			}
			/**
			 *初始化imgFold的坐标 
			 **/
			private var menuLeftWidth:Number;//记录menuLeft的宽度
			private function initAddFoldBtn():void{
				imgFold.x=menuLeft.width+5;
				imgFold.y=(menuLeft.height-imgFold.height)/2 + 70;
				imgFold.visible = this.visible;
			}
			private function resizeHandler(evt:Event):void{
				imgFold.x = menuLeft.width + 5;
			}
			private function imgFoldClickHandler(evt:Event):void{
				if(moveEffect.isPlaying){
					moveEffect.end();
					resizeEffect.end();
				}
				if(menuLeft.width != 0){
					menuLeftWidth =  menuLeft.width;
				}
				
				moveEffect.play();
				resizeEffect.play();
			}
			
			
			protected function moveEffect_effectEndHandler(event:EffectEvent):void
			{
				imgFold.source = null;
				if(imgFold.toolTip == "收起"){
					imgFold.toolTip = "展开";
					var tempClass:Class=IconUtility.getClass(imgFold,"images/mini-right.gif",5,35);
					imgFold.source=tempClass;
					
					moveEffect.xTo = menuLeftWidth + 5;
					resizeEffect.widthTo = menuLeftWidth;
					menuLeft.visible = false;
				}else{
					imgFold.toolTip = "收起";
					var tempClass:Class=IconUtility.getClass(imgFold,"images/mini-left.gif",5,35);
					imgFold.source=tempClass;
					
					moveEffect.xTo = 5;
					resizeEffect.widthTo = 0;
				} 
			}

			
		]]>
	</mx:Script>
	<mx:XML id="systemMainXml">
		<Root>
		<node id="xtfw" label="系统服务">
			<node id="yhgl" label="用户管理" pageUrl="user"/>
			<node id="zzgl" label="组织管理" pageUrl="zzgl"/>
			<node id="jsgl" label="角色管理" pageUrl="rule"/>
			<node id="lcgl" label="流程管理" pageUrl="lcgl"/>
			<node id="dmbgl" label="代码表管理" pageUrl="codelist"/>	
			<node id="sjzd" label="固定资产国标" pageUrl="dictionarylist"/>
			<node id="sjtb" label="数据同步" pageUrl="sjtb"/>		
		</node>
		</Root>
	</mx:XML>
	
	<mx:Move id="moveEffect" target="{imgFold}"  xFrom="{menuLeft.width + 5}" xTo="{5}" effectStart="{menuLeft.visible = true;}" effectEnd="moveEffect_effectEndHandler(event)"/>
	<mx:Resize id="resizeEffect" target="{menuLeft}"  widthFrom="{menuLeft.width}" widthTo="{0}" />
	<mx:Image id="imgFold" includeInLayout="false" toolTip="收起" source="@Embed(source='images/mini-left.gif')" mouseOver="{Mouse.cursor = MouseCursor.BUTTON;}" mouseOut="{Mouse.cursor = MouseCursor.ARROW;}" />
	<mx:HDividedBox width="100%" height="100%" borderStyle="none" horizontalAlign="center" horizontalGap="5" verticalAlign="middle" verticalGap="0">
		<mx:VBox id="menuLeft" width="150" height="100%" verticalGap="2" borderStyle="solid" borderColor="#99CCFF" horizontalAlign="center" verticalAlign="middle" fontSize="12"  horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:HBox width="100%" height="20" horizontalAlign="left" backgroundColor="#99CCFF" borderStyle="none" horizontalGap="0" verticalAlign="middle">
				<mx:Label text="系统服务" textIndent="5" textAlign="left" fontWeight="bold" fontSize="13"/>
			</mx:HBox>
			<mx:Tree id="menutree" borderStyle="none" dragEnabled="false" width="100%" height="100%" click="treeSelectClick()" 
					 labelField="@label" showRoot="false"/>
		</mx:VBox>
		<mx:ViewStack id="managerStack" width="100%" height="100%" creationPolicy="all">
		</mx:ViewStack>
	</mx:HDividedBox>
</mx:Module>
