<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<bean id="loadProperites"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:/jdbc.properties</value>
		</property>
	</bean>

	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass">
			<value>${jdbc.driver}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize">
			<value>5</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>100</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>
		<!--
			JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default:
			0
		-->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>300</value>
		</property>
		<!--
			获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
			获取连接失败后该数据源将申明已断开并永久关闭。Default:
			false
		-->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<!--
			因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
			时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default:
			false
		-->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
		<!--  
		<property name="testConnectionOnCheckin">
			<value>true</value>
		</property>
		-->
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>
		<property name="preferredTestQuery">
			<value>select 1 from dual</value>
		</property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<!--session工厂-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" >
		<property name="dataSource" >
			<ref local="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.connection.release_mode">auto</prop>
				<prop key="hibernate.autoReconnect">true</prop>
			</props>
		</property>
<!-- 		映射数据库表为实体类 -->
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/net/chinanets/pojos</value>
				<value>classpath:/net/chinanets/entity</value>
			</list>
		</property>
		
		<!-- <property name="mappingLocations">
			<list>
				<value>classpath:jbpm.repository.hbm.xml</value>
				<value>classpath:jbpm.execution.hbm.xml</value>
				<value>classpath:jbpm.history.hbm.xml</value>
				<value>classpath:jbpm.task.hbm.xml</value>
				<value>classpath:jbpm.identity.hbm.xml</value>
			</list>
		</property> -->
	</bean>
	
	<!-- 工作流引擎 -->
<!-- 	<bean id="springHelper" class="org.jbpm.pvm.internal.processengine.SpringHelper"/> -->
	<!--流程引擎服务总入口，可以获得其他Service-->
<!-- 	<bean id="processEngine" factory-bean="springHelper" factory-method="createProcessEngine"/> -->
	<!-- 流程定义库服务类 -->
<!-- 	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/> -->
	<!-- 流程执行服务类 -->
<!-- 	<bean id="executionService" factory-bean="processEngine" factory-method="getExecutionService"/> -->
	<!-- 流程任务服务类 -->
<!-- 	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/> -->
	<!-- 历史任务服务类 -->
<!-- 	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/> -->
	<!-- 用户与角色服务类 -->
<!-- 	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/> -->
	
	<!-- 事务管理 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPoint" expression="execution(* net.chinanets.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPoint" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 为上传操作添加事务管理 servlet 包里的任意类的任意方法 -->  
		<aop:config>
		<aop:pointcut id="AllUploadMethod" expression="execution(* net.chinanets.servlet.*.*(..))" />
		<aop:advisor pointcut-ref="AllUploadMethod" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 系统日志管理 -->
	<bean id="logManager" class="net.chinanets.utils.LogManager"></bean>
	<aop:config>
		<aop:aspect ref="logManager">
			<aop:pointcut id="logPonit" expression="execution (* net.chinanets.service.*.*(..))&amp;&amp;this(obj)"/>
			<aop:after-returning method="log" pointcut-ref="logPonit" />
		</aop:aspect>
	</aop:config>
	
	<bean id="exceptionLog" class="net.chinanets.utils.AopExceptionHandler"></bean>
	
    <!-- beanName自动代理 管理所有Service中的Exception -->
	<bean id="logAdvice" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
				<value>*Dao</value>
			</list>
		</property>
		<property name="interceptorNames">
		<list>
			<value>exceptionLog</value>
		</list>
		</property>
	</bean>
	
	<!-- 导入beans文件 -->
	<import resource="classpath:net/chinanets/spring/beans.xml" />
</beans>